# This file contains issues about how to identify programs from hash sets or execution graphs.

1. Set structure method does not seem to work to identify the programs, because of a few big problems.

2. It is interesting to use the graph techniques, specifically, to check if the graphs are mergable. This method
   is likely to involve more complication and be more expensive than set structure method. There are a few
   concerns in case of merging different graphs.
   a. What does it mean by 'mergable'?
      Actually, any two execution can be thought to be mergable. There are massive use of indirect branches in
	  the graph. One interesting observation here is that every program compiled with the same option (maybe also
	  with the same version of C library) will have a very similar process (initializing the C library or related
	  stuff). Right before it enter the main block of the program, there is a block that uses a indirect jump to
	  enter the real main function. If we start from there, then it would be much easier to tell if two programs
	  are from the same one because the subsequent blocks would be different.
	  However, the problem is how to decide from a graph where this block is (where the entry point locates). It
	  is not easy in terms of different OS, libray and environment.
   b. There are some kind of programs such as Latex that fork many process executing other programs, how to deal
      with that case??

3. For indirect branch, we may need to treat them differently because they can actually jump to any place they
   'want' to. If we do a 'flexible' merge, which means any indirect branches with different targets are mergeable,
   then it turns out that any executions are mergeable. Therefore, we need to do some special treatment to them.
   One interesting indirect branch is the entry of main. For different programs, the entry basic block of main are
   different and maybe few collisions happen there (need further verification). Thus, if we can figure out a way
   to identify that special 'indirect branch' point, most programs can be differentiated. One possible way to
   automatically find out that point (rather than hardcoding) is use a statistical method. Usually, the number of
   targets of a indirect branch is very limitted. If we see in the graph a point that has tens of hundreds or even
   thousands of branch target, we have very high confidence to say it is the point!!

   However, there is another problem to solve in the case of a hash collision or even same code in the first block
   of main function. That's a really tough case!!! We need a survey on many many different existing programs to
   verify how different that 'first main block' is.

!! A survey on 116 programs in /bin shows that 108 of them have a unique first main block hash, except for the
   following 4 pairs, which are very similar programs. Applying the same test on /usr/sbin programs, 54 out of
   57 programs have unique hash except for 2 pairs.
   (The following 4 pairs of programs are from /bin)
   Binary files /bin/hostname and /bin/dnsdomainname differ
   Binary files /bin/ls and /bin/dir differ
   Binary files /bin/true and /bin/false differ
   Binary files /bin/vdir and /bin/dir differ
   (The following 2 pairs of programs are from /usr/sbin)
   Binary files /usr/sbin/ck-log-system-restart and /usr/sbin/atd differ
   Binary files /usr/sbin/ck-log-system-stop and /usr/sbin/atd differ

!! Another survey checks the first main blocks of several programs including ls, dd, tar, latex, sox and dot. Each
   of them except dot is executed for 1000-2000 times (dot is executed for 720 times), and the first main blcoks
   of these programs are the same except for latex, which actually executes two different programs (tex and
   pdftex).
   The following is the result of the survey:
   131238f0aaa5b669:/scratch/crowd-safe-test-data/hashlog/graph/ls_2013-02-27_02-11-54/ls/run353
   e4afd4cb74520269:/scratch/crowd-safe-test-data/hashlog/graph/dd_2013-02-27_00-19-06/dd/run353
   68ccce2db5de4269:/scratch/crowd-safe-test-data/hashlog/graph/tar_2013-02-26_20-25-19/tar/run353
   e4afd7bb64525669:/scratch/crowd-safe-test-data/hashlog/graph/latex_2013-02-26_09-47-46/latex/run353
   608ede0964d62e69:/scratch/crowd-safe-test-data/hashlog/graph/sox_2013-02-27_01-04-46/sox/run353
   be7962860f08f669:/scratch/crowd-safe-test-data/hashlog/graph/latex_2013-02-26_09-47-46/latex/run1018
   aefd41de6d185669:/scratch/crowd-safe-test-data/hashlog/graph/dot_2013-02-26_15-05-09/dot/run353

   The following is the result of the survey for the actual first main block:
   2ce2d7b9cd9898d9:/scratch/crowd-safe-test-data/hashlog/graph/dd_2013-02-27_00-19-06/dd/run353
   1157ceaa0:/scratch/crowd-safe-test-data/hashlog/graph/latex_2013-02-26_09-47-46/latex/run353
   9cbb05822bfafc17:/scratch/crowd-safe-test-data/hashlog/graph/dot_2013-02-26_15-05-09/dot/run353
   42696542a8bb5822:/scratch/crowd-safe-test-data/hashlog/graph/ls_2013-02-27_02-11-54/ls/run353
   9914a009b26038c0:/scratch/crowd-safe-test-data/hashlog/graph/sox_2013-02-27_01-04-46/sox/run353
   aeb8ae544e6b2a7:/scratch/crowd-safe-test-data/hashlog/graph/tar_2013-02-26_20-25-19/tar/run353

   Something interesting here is that we should take a look at those programs with the same first main blocks to
   see how things will go (mainly check if they are mergeable after entering main function. We should notice that
   the same indirect thing may happen inside main, which means the are always mergeable in terms of 'flexible
   indirect branch merge.'

*4. One thing is also worth a detailed check, which is a program calling the 'exec' system call to execute other
   programs. In this case, since other programs have their own first main block, will it scew things up?? It may
   depend on how programs are initialized and loaded in the 'exdc' way... This needs further detailed thinking and
   research work!! 

5.  One thing about tag and hash is their uniqueness. At first glance, tag should be unique in the same execution.
    However, it seems that the assumption is not true for cases that will fork-and-exec another programs. I guess
	tag is the virtual address of the basic block so that fork-and-exec another process will make it possible for
	the same execution to have the same tag. "If" this is the case, then tag will be useless...
	
	It might be useful to take a detailed look at how often hash collision happens. It will determine the how
	reliable it is to base the graph matching problem on its uniqueness.




