#!/bin/bash

. $csc/scripts/cs-common

function print_usage() {
  echo "Usage: "
  echo "    round-robin-merge [ pass-through-options ] <run-dir>*"
  echo "    round-robin-merge [ pass-through-options ] <run-listing> (file of <run-dir>*)"
}

check_help $1 print_usage

function merge() {
  targets=$1

  run_list_file="/tmp/"$(basename $0)"."$RANDOM".log"

  echo "Writing run list to "$run_list_file

  for f in $(find -L $targets -type 'f' -name "*.graph-node.*")
  do
    echo $(dirname $f) >> $run_list_file
  done
  
  uniq $run_list_file > $run_list_file".1"
  mv $run_list_file".1" $run_list_file

  java $jvm_options -cp $cp $main_class $clusters $csc_dir $log_dir $resume \
    $thread_count $unity $run_list_file

  #rm $run_list_file
}

main_class="edu.uci.plrg.cfi.x86.merge.graph.main.RoundRobinMerge"
append_classpath "CROWD_SAFE_MERGE_DIR"
append_classpath "CROWD_SAFE_COMMON_DIR"
jvm_options="-Xms6144M -Xmx12288M"

while getopts "c:d:l:t:ru" Option
do
  case $Option in
    c ) clusters="-c "$OPTARG;;
    d ) csc_dir="-d "$OPTARG;;
    l ) log_dir="-l "$OPTARG;;
    r ) resume="-r";;
    t ) thread_count="-t "$OPTARG;;
    u ) unity="-u";;
    * ) usage; exit;;
  esac
done
shift $(($OPTIND - 1))

if [ -f "$1" ]
then
  targets=$(cat $1)
else
  for d in $@
  do
    targets=$targets" "$d
  done
fi
echo "targets: "$targets
merge "$targets"

